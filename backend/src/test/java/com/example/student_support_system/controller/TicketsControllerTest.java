package com.example.student_support_system.controller;

import com.example.student_support_system.brevo.templates.ForwardTicketTemplate;
import com.example.student_support_system.brevo.templates.ReplyTicketTemplate;
import com.example.student_support_system.brevo.templates.TicketClosedTemplate;
import com.example.student_support_system.dto.ticket.CreateTicketRequestDTO;
import com.example.student_support_system.dto.ticket.ForwardTicketDto;
import com.example.student_support_system.dto.ticket.ReplyTicketDto;
import com.example.student_support_system.dto.ticket.UpdateTicketRequestDTO;
import com.example.student_support_system.model.ticket.Ticket;
import com.example.student_support_system.model.ticket.TicketCategory;
import com.example.student_support_system.model.ticket.TicketStatus;
import com.example.student_support_system.model.user.UserAccount;
import com.example.student_support_system.service.EmailNotificationService;
import com.example.student_support_system.service.TicketService;
import com.example.student_support_system.service.UserAccountService;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import java.time.LocalDateTime;
import java.util.Collections;
import java.util.List;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;


@ExtendWith(MockitoExtension.class)
public class TicketsControllerTest {

    @Mock
    private TicketService ticketService;

    @InjectMocks
    private TicketController ticketController;

    @Mock
    private UserAccountService userAccountService;

    @Mock
    private EmailNotificationService emailNotificationService;



    @Test
    void testGetAllTickets() throws Exception {
        try {
            Ticket ticket = new Ticket();
            List<Ticket> ticketList = Collections.singletonList(ticket);
            when(ticketService.getAllTickets()).thenReturn(ticketList);

            ResponseEntity response = ticketController.getAllTickets();

            Assertions.assertEquals(HttpStatus.OK, response.getStatusCode());
            Assertions.assertEquals(ticketList, response.getBody());
        } catch (Exception e) {
            Assertions.fail("getAllTicketsTest failed", e);
        }
    }

    @Test
    void testGetTicketsByCreatedUserId() throws Exception {
        try {
            String userIdString = "1";
            Long userId = Long.parseLong(userIdString);
            UserAccount userAccount = new UserAccount();
            userAccount.setId(userId);
            Ticket ticket = new Ticket();
            ticket.setCreatedUser(userAccount);
            List<Ticket> ticketList = Collections.singletonList(ticket);

            when(userAccountService.getUserAccountByUserId(userIdString)).thenReturn(userAccount);
            when(ticketService.getTicketsByCreatedUserId(userId)).thenReturn(ticketList);

            ResponseEntity response = ticketController.getTicketsByCreatedUserId(userIdString);

            verify(userAccountService, times(1)).getUserAccountByUserId(userIdString);
            verify(ticketService, times(1)).getTicketsByCreatedUserId(userId);
            Assertions.assertEquals(HttpStatus.OK, response.getStatusCode());
            Assertions.assertEquals(ticketList, response.getBody());
        }
        catch (Exception e) {
            Assertions.fail("getTicketsByCreatedUserIdTest failed", e);
        }
    }

    @Test
    void testCreateTicket() throws Exception{
        try {
            CreateTicketRequestDTO requestDTO = new CreateTicketRequestDTO();
            requestDTO.setTitle("Test Title");
            requestDTO.setDescription("Test Description");
            requestDTO.setCategory(TicketCategory.Academic);
            requestDTO.setCreatedUserId("testUserId");

            UserAccount userAccount = new UserAccount();
            userAccount.setFirstName("Test");
            userAccount.setEmailAddress("test@example.com");

            Ticket ticket = new Ticket();
            ticket.setId(1L); // Assuming ID is generated by the system
            ticket.setTitle(requestDTO.getTitle());
            ticket.setDescription(requestDTO.getDescription());
            ticket.setCategory(requestDTO.getCategory());
            ticket.setCreatedUser(userAccount);
            ticket.setDateCreated(LocalDateTime.now());

            when(userAccountService.getUserAccountByUserId(requestDTO.getCreatedUserId())).thenReturn(userAccount);
            when(ticketService.createTicket(any(Ticket.class))).thenReturn(ticket);


            ResponseEntity response = ticketController.createTicket(requestDTO);


            verify(userAccountService, times(1)).getUserAccountByUserId(requestDTO.getCreatedUserId());
            verify(ticketService, times(1)).createTicket(any(Ticket.class));
            verify(emailNotificationService, times(1)).sendEmailNotification(any(), eq(userAccount.getEmailAddress()));
            Assertions.assertEquals(HttpStatus.OK, response.getStatusCode());
            Assertions.assertEquals(ticket, response.getBody());

        }
        catch (Exception e) {
            Assertions.fail("createTicketTest failed", e);
        }
    }

    @Test
    void testGetTicketById() throws Exception {
        try {
            Long ticketId = 1L;
            Ticket ticket = new Ticket();
            ticket.setId(ticketId);
            when(ticketService.getTicketById(ticketId)).thenReturn(ticket);


            ResponseEntity response = ticketController.getTicketById(ticketId);


            verify(ticketService, times(1)).getTicketById(ticketId);
            Assertions.assertEquals(HttpStatus.OK, response.getStatusCode());
            Assertions.assertEquals(ticket, response.getBody());
        }
        catch (Exception e) {
            Assertions.fail("getTicketByIdTest failed", e);
        }
    }

    @Test
    void testDeleteTicket() throws Exception {
        try {
            Long ticketId = 1L;

            doNothing().when(ticketService).deleteTicket(ticketId);

            ResponseEntity response = ticketController.deleteTicket(ticketId);

            verify(ticketService, times(1)).deleteTicket(ticketId);
            Assertions.assertEquals(HttpStatus.OK, response.getStatusCode());
            Assertions.assertEquals("Ticket deleted successfully", response.getBody());
        }
        catch (Exception e) {
            Assertions.fail("deleteTicketTest failed", e);
        }
    }

    @Test
    void testUpdateTicket() throws Exception {
        try {
            Long existingTicketId = 1L;
            UpdateTicketRequestDTO updateRequestDTO = new UpdateTicketRequestDTO();
            updateRequestDTO.setStatus(TicketStatus.REPLIED);
            updateRequestDTO.setDateResponded(LocalDateTime.now());

            Ticket existingTicket = new Ticket();
            existingTicket.setId(existingTicketId);
            existingTicket.setStatus(TicketStatus.PENDING);

            when(ticketService.getTicketById(existingTicketId)).thenReturn(existingTicket);
            doNothing().when(ticketService).updateTicket(any(Ticket.class));

            ResponseEntity response = ticketController.updateTicket(existingTicketId, updateRequestDTO);


            verify(ticketService, times(2)).getTicketById(existingTicketId);
            verify(ticketService, times(1)).updateTicket(any(Ticket.class));
            Assertions.assertEquals(HttpStatus.OK, response.getStatusCode());

        } catch (Exception e) {
            Assertions.fail("updateTicketTest failed", e);
        }
    }

    @Test
    void testForwardTicket() throws Exception {
        Long ticketId = 123L;
        ForwardTicketDto forwardTicketDto = new ForwardTicketDto();
        forwardTicketDto.setForwardEmail("forward@example.com");

        ObjectMapper objectMapper = new ObjectMapper();
        JsonNode forwardData = objectMapper.createObjectNode().put("key", "value");
        forwardTicketDto.setForwardData(forwardData);

        Ticket ticket = new Ticket();
        ticket.setId(ticketId);
        UserAccount user = new UserAccount();
        user.setFirstName("John");
        user.setLastName("Doe");
        user.setEmailAddress("john.doe@example.com");
        ticket.setCreatedUser(user);


        Mockito.when(ticketService.updateForward(ticketId, forwardTicketDto.getForwardEmail(), forwardTicketDto.getForwardData())).thenReturn(ticket);

        ResponseEntity responseEntity = ticketController.forwardTicket(ticketId, forwardTicketDto);


        Mockito.verify(ticketService).updateForward(ticketId, forwardTicketDto.getForwardEmail(), forwardTicketDto.getForwardData());
        Mockito.verify(emailNotificationService).sendEmailNotification(
                Mockito.any(ForwardTicketTemplate.class),
                Mockito.eq(forwardTicketDto.getForwardEmail())
        );

        Assertions.assertEquals(ResponseEntity.ok().body(ticket), responseEntity);
    }

    @Test
    void testReplyTicket() throws Exception {

        Long ticketId = 123L;
        ReplyTicketDto replyTicketDto = new ReplyTicketDto();
        replyTicketDto.setReply("This is a reply");
        replyTicketDto.setEmail("reply@example.com");

        Ticket ticket = new Ticket();
        ticket.setId(ticketId);
        UserAccount user = new UserAccount();
        user.setFirstName("John");
        user.setLastName("Doe");
        user.setEmailAddress("john.doe@example.com");
        ticket.setCreatedUser(user);

        Mockito.when(ticketService.replyTicket(ticketId, replyTicketDto.getReply(), replyTicketDto.getEmail())).thenReturn(ticket);

        ResponseEntity responseEntity = ticketController.replyTicket(ticketId, replyTicketDto);

        Mockito.verify(ticketService).replyTicket(ticketId, replyTicketDto.getReply(), replyTicketDto.getEmail());
        Mockito.verify(emailNotificationService).sendEmailNotification(
                Mockito.any(ReplyTicketTemplate.class),
                Mockito.eq(user.getEmailAddress())
        );

        Assertions.assertEquals(ResponseEntity.ok().body(ticket), responseEntity);
    }

    @Test
    void testCloseTicket() throws Exception {
        Long ticketId = 123L;
        Ticket ticket = new Ticket();
        ticket.setId(ticketId);
        Mockito.when(ticketService.closeTicket(ticketId)).thenReturn(ticket);

        UserAccount user = new UserAccount();
        user.setFirstName("John");
        user.setLastName("Doe");
        user.setEmailAddress("john.doe@example.com");
        ticket.setCreatedUser(user);

        ResponseEntity responseEntity = ticketController.closeTicket(ticketId);

        Mockito.verify(ticketService).closeTicket(ticketId);
        Mockito.verify(emailNotificationService).sendEmailNotification(
                Mockito.any(TicketClosedTemplate.class),
                Mockito.eq(user.getEmailAddress())
        );
        Assertions.assertEquals(ResponseEntity.ok().body(ticket), responseEntity);
    }

    @Test
    void testGetAllCategories() {
        ResponseEntity responseEntity = ticketController.getAllCategories();

        Assertions.assertEquals(ResponseEntity.ok().body(TicketCategory.values()), responseEntity);
    }

}
